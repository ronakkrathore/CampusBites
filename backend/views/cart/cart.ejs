<% layout('/layouts/boilerplate') -%>

<body>
    <div class="container mt-5">
        <h2 class="text-center mb-4">Your Cart</h2>
        
        <% if (cart && cart.items && cart.items.length > 0) { %>
            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-body">
                            <% cart.items.forEach(item => { %>
                                <div class="cart-item mb-3 p-3 border-bottom">
                                    <div class="row align-items-center">
                                        <div class="col-md-3">
                                            <img src="<%= item.productId.imageUrl %>" class="img-fluid" alt="<%= item.productId.name %>">
                                        </div>
                                        <div class="col-md-6">
                                            <h5><%= item.productId.name %></h5>
                                            <p class="text-muted">₹<%= item.price %> per item</p>
                                            <div class="quantity-controls">
                                                <button class="btn btn-sm btn-outline-secondary decrease-quantity" data-item-id="<%= item._id %>">-</button>
                                                <span class="mx-2"><%= item.quantity %></span>
                                                <button class="btn btn-sm btn-outline-secondary increase-quantity" data-item-id="<%= item._id %>">+</button>
                                            </div>
                                        </div>
                                        <div class="col-md-3 text-end">
                                            <h5>₹<%= item.price * item.quantity %></h5>
                                            <button class="btn btn-danger btn-sm remove-item" 
                                                    data-item-id="<%= item._id %>"
                                                    data-item-name="<%= item.productId.name %>"
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#removeItemModal">
                                                Remove
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Order Summary</h5>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal</span>
                                <span>₹<%= cart.totalPrice %></span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>GST (18%)</span>
                                <span>₹<%= (cart.totalPrice * 0.18).toFixed(2) %></span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between mb-3">
                                <strong>Total</strong>
                                <strong>₹<%= (cart.totalPrice * 1.18).toFixed(2) %></strong>
                            </div>
                            <button class="btn btn-success w-100" id="checkout-btn">Proceed to Checkout</button>
                        </div>
                    </div>
                </div>
            </div>
        <% } else { %>
            <div class="text-center">
                <p class="lead">Your cart is empty</p>
                <a href="/#menu" class="btn btn-primary">Browse Menu</a>
            </div>
        <% } %>
    </div>

    
    <div class="modal fade" id="removeItemModal" tabindex="-1" aria-labelledby="removeItemModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="removeItemModalLabel">Remove Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove <span id="itemName"></span> from your cart?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmRemove">Remove</button>
                </div>
            </div>
        </div>
    </div>

    
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        let itemToRemove = null;

        async function updateQuantity(itemId, change) {
            try {
                const response = await fetch(`/api/cart/items/${itemId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ change })
                });

                if (!response.ok) {
                    throw new Error('Failed to update quantity');
                }

                window.location.reload();
            } catch (error) {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity');
            }
        }

        
        async function removeItem(itemId) {
            try {
                const response = await fetch(`/api/cart/items/${itemId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error('Failed to remove item');
                }

                // Show success message
                const toast = document.createElement('div');
                toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed bottom-0 end-0 m-3';
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            Item removed successfully!
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                document.body.appendChild(toast);
                const bsToast = new bootstrap.Toast(toast);
                bsToast.show();

                
                toast.addEventListener('hidden.bs.toast', function () {
                    toast.remove();
                });

                
                setTimeout(() => {
                window.location.reload();
                }, 1000);
            } catch (error) {
                console.error('Error removing item:', error);
                alert('Failed to remove item');
            }
        }

        
        async function handleCheckout() {
            try {
                console.log("Starting checkout process...");
                
                
                const response = await fetch("/api/create-order", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    credentials: 'include'
                });

                const data = await response.json();
                console.log("Server response:", data);

                if (!response.ok) {
                    throw new Error(data.message || "Failed to create order");
                }

                const options = {
                    key: data.key,
                    amount: data.amount,
                    currency: data.currency,
                    name: "CampusBites",
                    description: "Food Order Payment",
                    order_id: data.orderId,
                    handler: async function (response) {
                        console.log("Payment response:", response);
                        try {
                            const verifyResponse = await fetch("/api/verify-payment", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                credentials: 'include',
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            console.log("Verification response:", verifyData);

                            if (verifyResponse.ok) {
                                await fetch("/api/set-flash", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({
                                        type: "success",
                                        message: "Payment successful! Redirecting to orders..."
                                    })
                                });
                                window.location.href = '/order';
                            } else {
                                throw new Error(verifyData.message || "Payment verification failed");
                            }
                        } catch (error) {
                            console.error("Payment verification error:", error);
                            await fetch("/api/set-flash", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({
                                    type: "error",
                                    message: "Payment verification failed"
                                })
                            });
                        }
                    },
                    prefill: {
                        name: "<%= user.username %>",
                        email: "<%= user.email %>"
                    },
                    theme: {
                        color: "#ce1212"
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                console.error("Checkout error:", error);
                await fetch("/api/set-flash", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        type: "error",
                        message: error.message || "Failed to initiate checkout"
                    })
                });
            }
        }

        
        document.addEventListener('DOMContentLoaded', function() {
            
            document.querySelectorAll('.increase-quantity').forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.dataset.itemId;
                    updateQuantity(itemId, 1);
                });
            });

            document.querySelectorAll('.decrease-quantity').forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.dataset.itemId;
                    updateQuantity(itemId, -1);
                });
            });

            
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function() {
                    itemToRemove = this.dataset.itemId;
                    document.getElementById('itemName').textContent = this.dataset.itemName;
                });
            });

            
            document.getElementById('confirmRemove').addEventListener('click', function() {
                if (itemToRemove) {
                    removeItem(itemToRemove);
                    const modal = bootstrap.Modal.getInstance(document.getElementById('removeItemModal'));
                    modal.hide();
                }
            });

            const checkoutBtn = document.getElementById('checkout-btn');
            if (checkoutBtn) {
                checkoutBtn.addEventListener('click', handleCheckout);
            }
        });
    </script>
</body>
